name: Hardware CI Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      repository_url:
        description: 'Repository URL for Test-O-Matic-hardwareCI'
        required: false
        default: 'https://github.com/Ruggero-R/Test-O-Matic-hardwareCI-R.git'
        type: string
      test_parameters:
        description: 'Test parameters to run (e.g., serialMS, i2c, can)'
        required: false
        default: 'serialMS i2c can'
        type: string

jobs:
  hardware-tests:
    runs-on: self-hosted
    
    steps:
    - name: Clone Test-O-Matic-hardwareCI repository
      run: |
        repo_url="${{ github.event.inputs.repository_url }}"
        if [ -z "$repo_url" ]; then
          repo_url="https://github.com/Ruggero-R/Test-O-Matic-hardwareCI-R.git"
        fi
        echo "Repository URL: $repo_url"
        
        # Remove existing directory if it exists
        if [ -d "test-o-matic" ]; then
          echo "Removing existing test-o-matic directory..."
          rm -rf test-o-matic
        fi
        
        echo "Cloning repository: $repo_url"
        # Configure git to avoid hanging and add timeout
        export GIT_TERMINAL_PROMPT=0
        
        # Clone with timeout (macOS compatible)
        echo "Attempting clone from your fork..."
        
        # Use background process with timeout for macOS compatibility
        git clone "$repo_url" test-o-matic &
        clone_pid=$!
        
        # Wait for clone to complete or timeout after 120 seconds
        wait_time=0
        while kill -0 $clone_pid 2>/dev/null; do
          if [ $wait_time -ge 120 ]; then
            echo "::error::Git clone operation timed out after 2 minutes."
            kill $clone_pid 2>/dev/null
            exit 1
          fi
          sleep 1
          wait_time=$((wait_time + 1))
        done
        
        # Wait for the process to finish and get exit code
        wait $clone_pid
        clone_exit_code=$?
        
        if [ $clone_exit_code -ne 0 ]; then
          echo "::error::Failed to clone repository. Exit code: $clone_exit_code"
          exit 1
        fi
        
        echo "Repository cloned successfully!"
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install dependencies
      run: |
        cd test-o-matic/unit-tests
        go mod download
        
    - name: Run hardware tests
      run: |
        cd test-o-matic/unit-tests
        test_params="${{ github.event.inputs.test_parameters }}"
        if [ -z "$test_params" ]; then
          test_params="serialMS i2c can"
        fi
        echo "Running tests with parameters: $test_params"
        
        # Build the go command with test parameters
        go_cmd="go run main.go"
        for param in $test_params; do
          go_cmd="$go_cmd -test $param"
        done
        
        echo "Executing: $go_cmd"
        
        # Capture the output and exit code
        set +e  # Don't exit immediately on error
        output=$(eval $go_cmd 2>&1)
        exit_code=$?
        set -e  # Re-enable exit on error
        
        # Print the output
        echo "$output"
        
        # Check for specific error conditions
        if [ $exit_code -ne 0 ]; then
          echo "::error::Hardware tests failed with exit code: $exit_code"
          exit 1
        elif echo "$output" | grep -i "error\|fail\|exception"; then
          echo "::error::Hardware tests encountered errors (see output above)"
          exit 1
        elif echo "$output" | grep -i "arduino-cli.*not found"; then
          echo "::error::arduino-cli is not installed or not in PATH. Please install Arduino CLI on the runner."
          exit 1
        elif echo "$output" | grep -i "no.*board\|board.*not.*found"; then
          echo "::error::No Arduino boards detected. Please ensure boards are connected and recognized."
          exit 1
        fi
        
        echo "Hardware tests completed successfully!"
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: hardware-test-results
        path: test-o-matic/unit-tests/test_results_*.json
        retention-days: 7