name: Hardware CI Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      repository_url:
        description: 'Repository URL for Test-O-Matic-hardwareCI'
        required: false
        default: 'https://github.com/bcmi-labs/Test-O-Matic-hardwareCI.git'
        type: string
      test_parameters:
        description: 'Test parameters to run (e.g., serialMS, i2c, can)'
        required: false
        default: 'serialMS i2c can'
        type: string

jobs:
  hardware-tests:
    runs-on: self-hosted
    
    steps:
    - name: Clone Test-O-Matic-hardwareCI repository
      run: |
        repo_url="${{ github.event.inputs.repository_url }}"
        if [ -z "$repo_url" ]; then
          repo_url="https://github.com/bcmi-labs/Test-O-Matic-hardwareCI.git"
        fi
        echo "Repository URL: $repo_url"
        
        # Remove existing directory if it exists
        if [ -d "test-o-matic" ]; then
          echo "Removing existing test-o-matic directory..."
          rm -rf test-o-matic
        fi
        
        echo "Cloning repository: $repo_url"
        # Use GitHub token for authentication if available
        if [ -n "${{ secrets.GITHUB_TOKEN }}" ]; then
          # Extract repo path from URL
          repo_path=$(echo "$repo_url" | sed 's|https://github.com/||')
          git clone "https://${{ secrets.GITHUB_TOKEN }}@github.com/$repo_path" test-o-matic
        else
          git clone "$repo_url" test-o-matic
        fi
        
        if [ $? -ne 0 ]; then
          echo "::error::Failed to clone repository. Please check if the repository exists and is accessible, or add a GitHub token to secrets."
          exit 1
        fi
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install dependencies
      run: |
        cd test-o-matic/unit-tests
        go mod download
        
    - name: Run hardware tests
      run: |
        cd test-o-matic/unit-tests
        test_params="${{ github.event.inputs.test_parameters }}"
        if [ -z "$test_params" ]; then
          test_params="serialMS i2c can"
        fi
        echo "Running tests with parameters: $test_params"
        
        # Build the go command with test parameters
        go_cmd="go run main.go"
        for param in $test_params; do
          go_cmd="$go_cmd -test $param"
        done
        
        echo "Executing: $go_cmd"
        eval $go_cmd
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: hardware-test-results
        path: test-o-matic/unit-tests/test_results_*.json
        retention-days: 7